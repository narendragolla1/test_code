
postgres_working_queries = [
    # Basic SELECT statements
    "SELECT * FROM employees;",
    "SELECT first_name, last_name FROM employees;",
    "SELECT DISTINCT department FROM employees;",

    # WHERE clause and operators
    "SELECT * FROM employees WHERE salary > 50000;",
    "SELECT * FROM employees WHERE department = 'Sales' AND hire_date > '2020-01-01';",
    "SELECT * FROM employees WHERE department IN ('Sales', 'Marketing');",
    "SELECT * FROM employees WHERE last_name LIKE 'S%';",
    "SELECT * FROM employees WHERE last_name ILIKE 's%';", #Case-insensitive like
    "SELECT * FROM employees WHERE salary BETWEEN 40000 AND 60000;",
    "SELECT * FROM employees WHERE hire_date IS NULL;",

    # Aggregate functions
    "SELECT COUNT(*) FROM employees;",
    "SELECT AVG(salary) FROM employees;",
    "SELECT SUM(salary) FROM employees;",
    "SELECT MAX(salary), MIN(salary) FROM employees;",
    "SELECT COUNT(DISTINCT department) FROM employees;",

    # GROUP BY and HAVING
    "SELECT department, AVG(salary) FROM employees GROUP BY department;",
    "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 10;",

    # ORDER BY and LIMIT/OFFSET
    "SELECT * FROM employees ORDER BY last_name ASC, first_name DESC;",
    "SELECT * FROM employees LIMIT 10;",
    "SELECT * FROM employees OFFSET 20 LIMIT 10;",

    # Joins
    "SELECT e.first_name, d.department_name FROM employees e JOIN departments d ON e.department_id = d.id;",
    "SELECT e.first_name, d.department_name FROM employees e LEFT JOIN departments d ON e.department_id = d.id;",
    "SELECT e.first_name, d.department_name FROM employees e RIGHT JOIN departments d ON e.department_id = d.id;",
    "SELECT e.first_name, d.department_name FROM employees e FULL OUTER JOIN departments d ON e.department_id = d.id;",
    "SELECT e1.first_name, e2.first_name AS manager_name FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id;", #Self Join

    # Subqueries
    "SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);",
    "SELECT * FROM employees WHERE department_id IN (SELECT id FROM departments WHERE location = 'New York');",
    "SELECT department, (SELECT COUNT(*) FROM employees WHERE e.department_id=employees.department_id) FROM departments e;", #Correlated subquery

    # Common Table Expressions (CTEs)
    "WITH AverageSalaries AS (SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department) SELECT * FROM AverageSalaries WHERE avg_salary > 50000;",
    "WITH RECURSIVE NumberSeries AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM NumberSeries WHERE n < 10) SELECT * FROM NumberSeries;", #Recursive CTE

    # Window functions
    "SELECT first_name, salary, RANK() OVER (ORDER BY salary DESC) AS salary_rank FROM employees;",
    "SELECT first_name, salary, DENSE_RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank FROM employees;",
    "SELECT first_name, salary, ROW_NUMBER() OVER (ORDER BY hire_date) FROM employees;",
    "SELECT first_name, salary, LAG(salary, 1, 0) OVER (ORDER BY hire_date) AS previous_salary FROM employees;",
    "SELECT first_name, salary, AVG(salary) OVER (PARTITION BY department) FROM employees;",

    # String functions
    "SELECT UPPER(last_name), LOWER(first_name), LENGTH(last_name) FROM employees;",
    "SELECT SUBSTRING(first_name FROM 1 FOR 3) FROM employees;",
    "SELECT first_name || ' ' || last_name AS full_name FROM employees;", #String concatenation
    "SELECT TRIM( ' example ') AS trimmed_string;", #Trim whitespace

    # Date/Time functions
    "SELECT CURRENT_DATE, CURRENT_TIME, NOW();",
    "SELECT EXTRACT(YEAR FROM hire_date), EXTRACT(MONTH FROM hire_date) FROM employees;",
    "SELECT hire_date + INTERVAL '1 year', hire_date - INTERVAL '1 month' FROM employees;",
    "SELECT AGE(hire_date) FROM employees;",

    # Conditional expressions
    "SELECT first_name, salary, CASE WHEN salary > 60000 THEN 'High' WHEN salary > 40000 THEN 'Medium' ELSE 'Low' END AS salary_level FROM employees;",
    "SELECT COALESCE(manager_id, 0) FROM employees;",

    # Array functions (if applicable with array columns)
    "SELECT ARRAY[1,2,3];", #Create array
    "SELECT ARRAY_APPEND(ARRAY[1,2],3);",#Append array
    "SELECT UNNEST(ARRAY[1,2,3]);", #Unnest array

    #JSON functions (if applicable with jsonb columns)
    "SELECT '{\"a\":1, \"b\":2}'::jsonb ->> 'a';", #Extract json value

    #Geographic functions with PostGIS (if installed)
    "CREATE EXTENSION IF NOT EXISTS postgis;", #Enable postgis extension
    "SELECT ST_AsText(ST_GeomFromText('POINT(0 0)'));" #Create point
]

postgres_non_working_queries = [
    # BigQuery-specific syntax
    "SELECT * FROM employees WHERE _PARTITIONTIME BETWEEN TIMESTAMP('2023-01-01') AND TIMESTAMP('2023-12-31');", #Partitioning pseudo column
    "SELECT column1 FROM employees QUALIFY ROW_NUMBER() OVER (PARTITION BY column2 ORDER BY column3) = 1;", #QUALIFY clause
    "SELECT * FROM employees TABLESAMPLE BERNOULLI(10 PERCENT);", #TABLESAMPLE (different syntax in Postgres)
    "SELECT * FROM employees FOR SYSTEM_TIME AS OF TIMESTAMP '2023-10-26 10:00:00';", #Time travel
    "SELECT REGEXP_EXTRACT(string_column, r'pattern') FROM employees;", #REGEXP_EXTRACT
    "SELECT SAFE_CAST(string_column AS INT64) FROM employees;", #SAFE_CAST
    "SELECT * FROM employees WHERE column1 LIKE '%[0-9]%';", #Regex in like
    "SELECT GENERATE_UUID();", #UUID (different syntax)
    "SELECT DATE_SUB(CURRENT_DATE, INTERVAL '1 day');", #Date sub
    "CREATE OR REPLACE TABLE your_table AS SELECT * FROM another_table;", #Create or replace table
    "SELECT column1, ARRAY_AGG(column2) AS aggregated_column FROM employees GROUP BY column1", #Array aggregation syntax is slightly different in standard SQL/Postgres

    # Incorrect or non-standard SQL
    "SELECT * WHER salary > 50000;", #Typo in WHERE
    "SELECT FROM employees;", #Missing SELECT list
    "GROUP BY department WHERE COUNT(*) > 10;", #Incorrect order of clauses
    "SELECT * FROM employees JOIN departments ON employees.dept_id = departments.id", #Ambiguous column name without aliases

    # Features not present in standard Postgres or requiring extensions
    "SELECT * FROM employees LATERAL VIEW EXPLODE(array_column);", #Lateral view explode (requires extensions or other approaches)
    "SELECT * FROM employees UNPIVOT (value FOR attribute IN (col1, col2, col3));", #UNPIVOT (requires extensions or other approaches)
]

print("Postgres Working Queries:\n", "\n".join(postgres_working_queries))
print("\nPostgres Non-Working Queries:\n", "\n".join(postgres_non_working_queries))
